@page "/CompanyProfile"
@using System.Security.Claims
@using InternLink.Data
@using InternLink.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Company Profile</PageTitle>

<h3>CompanyProfile</h3>
<label class="form-control w-full max-w-xs">
    <div class="label">
        <span class="label-text">Name Company</span>
    </div>
    <input type="text" placeholder="Enter the name of your company" class="input input-bordered w-full max-w-xs" />

    <div class="label">
        <span class="label-text">Description</span>
    </div>
    <input type="text" placeholder="Enter a description about your company" class="input input-bordered w-full max-w-xs" />

    <div class="label">
        <span class="label-text">Location</span>
    </div>
    <input type="text" placeholder="Enter the location of the company" class="input input-bordered w-full max-w-xs" />

    <div class="label">
        <span class="label-text">Enternal Links</span>
    </div>

    <input type="url"  class="input input-bordered w-full max-w-xs" />

    <div class="label">
        <span class="label-text-alt">Add links to your social profiles or website</span>
    </div>

    <div class="label">
        <span class="label-text">Representives</span>
    </div>

    <input type="url" class="input input-bordered w-full max-w-xs" />

    <div class="label">
        <span class="label-text-alt">Add links to your social profiles or website</span>
    </div>

    <button class="btn btn-active btn-neutral">change profile</button>
</label>

@code {
    private CompanyProfile company = new CompanyProfile();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var applicationUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);
            company = await DbContext.CompanyProfiles.FirstOrDefaultAsync(c => c.UserId == userId) ?? new CompanyProfile { UserId = userId };

            if (applicationUser != null)
            {
                company.CompanyName = applicationUser.UserName; // Assuming you want to use the username as the company name
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"CompanyName: {company.CompanyName}, " +
                          $"Industry: {company.Industry}, " +
                          $"WebsiteUrl: {company.WebsiteUrl}");
        
        var existingCompany = await DbContext.CompanyProfiles.FirstOrDefaultAsync(c => c.UserId == company.UserId);
        if (existingCompany != null)
        {
            existingCompany.CompanyName = company.CompanyName;
            existingCompany.Industry = company.Industry;
            existingCompany.WebsiteUrl = company.WebsiteUrl;
            DbContext.CompanyProfiles.Update(existingCompany);
        }
        else
        {
            DbContext.CompanyProfiles.Add(company);
        }

        var applicationUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == company.UserId);
        if (applicationUser != null)
        {
            applicationUser.UserName = company.CompanyName; // Assuming you want to update the username with the company name
            DbContext.Users.Update(applicationUser);
        }

        await DbContext.SaveChangesAsync();
    }

//    private void HandleAvatarSelected(InputFileChangeEventArgs e)
//    {
//        var file = e.File;
        // Process the file and update company.AvatarUrl
        // For example, save the file to a server or cloud storage and set the URL
//        company.AvatarUrl = "Images/company_avatar.png"; // Update with actual URL
//    }
}