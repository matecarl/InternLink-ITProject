@rendermode InteractiveServer

@page "/company-profile"
@using System.Security.Claims
@using InternLink.Data
@using InternLink.Models
@using InternLink.Services.Profiles
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject IProfileService ProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InternLink.Data.ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Company profile</PageTitle>

<h3>CompanyProfile</h3>

@if (company == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@company" method="post" OnValidSubmit="HandleValidSubmit" FormName="companyProfileForm" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <input type="hidden" name="company.Id" value="@company.Id" />

        <div class="form-control w-full max-w-xs">
            <div class="label">
                <span class="label-text">Company Name</span>
            </div>
            <InputText @bind-Value="company.CompanyName" placeholder="Enter the name of your company" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => company.CompanyName" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Description</span>
            </div>
            <InputText @bind-Value="company.Description" placeholder="Enter a description about your company" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => company.Description" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Location</span>
            </div>
            <InputText @bind-Value="company.Location" placeholder="Enter the location of the company" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => company.Location" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Website URL</span>
            </div>
            <InputText @bind-Value="company.WebsiteUrl" placeholder="Enter your website URL" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => company.WebsiteUrl" class="text-red-500 text-sm mt-1" />

            <button type="submit" class="btn btn-active btn-neutral">${company.Id == 0 ? "Create a profile" : "Change profile"}</button>
        </div>
    </EditForm>
}

@code {
    private CompanyProfile company;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            company = await ProfileService.GetCompanyProfileAsync(userId) ?? new CompanyProfile { UserId = userId };

            if (company.CompanyName == null)
            {
                company.CompanyName = user.Identity.Name;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"CompanyName: {company.CompanyName}, " +
                          $"Description: {company.Description}, " +
                          $"Location: {company.Location}, " +
                          $"WebsiteUrl: {company.WebsiteUrl}, " +
                          $"Industry: {company.Industry}");

        var existingCompany = await DbContext.CompanyProfiles.FirstOrDefaultAsync(c => c.UserId == company.UserId);

        if (existingCompany == null)
        {
            // Create new profile
            await DbContext.CompanyProfiles.AddAsync(company);
            await DbContext.SaveChangesAsync();
        }
        else
        {
            // Update existing profile
            DbContext.CompanyProfiles.Update(company);
            await DbContext.SaveChangesAsync();
            return;
        }

        existingCompany.CompanyName = company.CompanyName;
        existingCompany.Description = company.Description;
        existingCompany.Location = company.Location;
        existingCompany.WebsiteUrl = company.WebsiteUrl;
    }

    // private void HandleFileSelected(InputFileChangeEventArgs e)
    // {
    //     // Handle file upload logic here
    //     var file = e.File;
    //     // Process the file and update company.ResumeUrl
    // }
    //
    // private void HandleAvatarSelected(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     // Process the file and update company.AvatarUrl
    //     // For example, save the file to a server or cloud storage and set the URL
    //     company.ProfilePhotoUrl = "Images/company_avatar.png"; // Update with actual URL
    // }
}
