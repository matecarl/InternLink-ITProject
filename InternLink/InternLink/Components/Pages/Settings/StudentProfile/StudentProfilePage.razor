@page "/StudentProfile"
@using System.Security.Claims
@using InternLink.Data
@using InternLink.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Student profile</PageTitle>

<h3>StudentProfile</h3>
    <EditForm Model="@student" method="post" OnValidSubmit="HandleValidSubmit" FormName="studentProfileForm" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <input type="hidden" name="student.Id" value="@student.Id" />

        <div class="form-control w-full max-w-xs">
            <div class="label">
                <span class="label-text">Upload Avatar</span>
            </div>
            <div class="avatar">
                <div class="ring-primary ring-offset-base-100 w-24 rounded-full ring ring-offset-2">
                    <InputFile OnChange="HandleAvatarSelected" class="input input-bordered w-full max-w-xs"/>
                </div>
            </div>
            
            <div class="label">
                <span class="label-text">Username</span>
            </div>
            <InputText @bind-Value="student.UserName" placeholder="Enter your username" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => student.UserName" class="text-red-500 text-sm mt-1" />
            
            <div class="label">
                <span class="label-text">First name</span>
            </div>
            <InputText @bind-Value="student.FirstName" placeholder="Enter your first name" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => student.FirstName" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Last name</span>
            </div>
            <InputText @bind-Value="student.LastName" placeholder="Enter your last name" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => student.LastName" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Bio</span>
            </div>
            <InputText @bind-Value="student.Description" placeholder="Write a short bio about yourself" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => student.Description" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Current Study</span>
            </div>
            <InputText @bind-Value="student.Study" placeholder="Enter your current study details" class="input input-bordered w-full max-w-xs"/>
            <ValidationMessage For="() => student.Study" class="text-red-500 text-sm mt-1" />

            <div class="label">
                <span class="label-text">Upload Resume</span>
            </div>
            <InputFile OnChange="HandleFileSelected" class="input input-bordered w-full max-w-xs"/>

            <button type="submit" class="btn btn-active btn-neutral">Change Profile</button>
        </div>
    </EditForm>

@code {
    [SupplyParameterFromForm] private StudentProfile student { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var applicationUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);
            student = await DbContext.StudentProfiles.FirstOrDefaultAsync(s => s.UserId == userId) ?? new StudentProfile { UserId = userId };

            if (applicationUser != null)
            {
                student.UserName = applicationUser.UserName;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"UserName: {student.UserName}, " +
                          $"FirstName: {student.FirstName}, " +
                          $"LastName: {student.LastName}, " +
                          $"Description: {student.Description}, " +
                          $"Study: {student.Study}, " +
                          $"Avatar: {student.ProfilePhotoUrl}, " +
                          $"ResumeUrl: {student.ResumeUrl}");
        
        var existingStudent = await DbContext.StudentProfiles.FirstOrDefaultAsync(s => s.UserId == student.UserId);
        if (existingStudent != null)
        {
            existingStudent.UserName = student.UserName;
            existingStudent.FirstName = student.FirstName;
            existingStudent.LastName = student.LastName;
            existingStudent.Description = student.Description;
            existingStudent.Study = student.Study;
            existingStudent.ResumeUrl = student.ResumeUrl;
            existingStudent.ProfilePhotoUrl = student.ProfilePhotoUrl;
            DbContext.StudentProfiles.Update(existingStudent);
        }
        else
        {
            student.UserName = student.UserName ?? String.Empty;
            student.FirstName = student.FirstName ?? String.Empty;
            student.LastName = student.LastName ?? String.Empty;
            student.Description = student.Description ?? String.Empty;
            student.Study = student.Study ?? String.Empty;
            student.ResumeUrl = student.ResumeUrl ?? String.Empty;
            student.ProfilePhotoUrl = student.ProfilePhotoUrl ?? String.Empty;
            DbContext.StudentProfiles.Add(student);
        }

        var applicationUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == student.UserId);
        if (applicationUser != null)
        {
            applicationUser.UserName = student.UserName;
            DbContext.Users.Update(applicationUser);
        }

        await DbContext.SaveChangesAsync();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Handle file upload logic here
        var file = e.File;
        // Process the file and update student.ResumeUrl
    }
    
    private void HandleAvatarSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        // Process the file and update student.AvatarUrl
        // For example, save the file to a server or cloud storage and set the URL
        student.ProfilePhotoUrl = "Images/avatar.png"; // Update with actual URL
    }
}