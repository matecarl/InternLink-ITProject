@page "/internships/create"
@attribute [Authorize(Roles = "Company")]

@using InternLink.Data
@using InternLink.Enums
@using InternLink.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Models
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IInternshipRepository Repository
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor


<PageTitle>Create new Internship</PageTitle>

<EditForm method="post" Model="Internship" OnValidSubmit="AddInternship" FormName="create" Enhance>
    <DataAnnotationsValidator />
    
    <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-lg mx-auto">
        <h2 class="text-2xl font-bold text-center mb-6">Post an Internship Listing</h2>

        <!-- Title -->
        <div class="form-control mb-4">
            <label for="title" class="label">
                <span class="label-text">Title</span>
            </label>
            <InputText id="title" @bind-Value="Internship.Title" class="input input-bordered w-full" />
            <ValidationMessage For="() => Internship.Title" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Description -->
        <div class="form-control mb-4">
            <label for="description" class="label">
                <span class="label-text">Description</span>
            </label>
            <InputTextArea id="description" @bind-Value="Internship.Description" class="textarea textarea-bordered w-full h-24" />
            <ValidationMessage For="() => Internship.Description" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Location -->
        <div class="form-control mb-4">
            <label for="location" class="label">
                <span class="label-text">Location</span>
            </label>
            <InputText id="location" @bind-Value="Internship.Location" class="input input-bordered w-full" />
            <ValidationMessage For="() => Internship.Location" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Remote Level -->
        <div class="form-control mb-4">
            <label for="remoteLevel" class="label">
                <span class="label-text">Remote Level</span>
            </label>
            <InputSelect id="remoteLevel" @bind-Value="Internship.RemoteLevel" class="select select-bordered w-full">
                <option value="" selected disabled>Select remote level</option>
                @foreach (var remoteLevel in Enum.GetValues(typeof(RemoteLevel)))
                {
                    <option value="@remoteLevel">@remoteLevel</option>
                }
            </InputSelect>
            <ValidationMessage For="() => Internship.RemoteLevel" class="text-red-500 text-sm mt-1" />
        </div>

        <!-- Minimum Duration -->
        <div class="form-control mb-6">
            <label for="minDuration" class="label">
                <span class="label-text">Minimum Required Duration (months)</span>
            </label>
            <InputNumber id="minDuration" @bind-Value="Internship.MinDuration" class="input input-bordered w-full" />
            <ValidationMessage For="() => Internship.MinDuration" class="text-red-500 text-sm mt-1" />
        </div>

        <div class="flex justify-between gap-4">
            <!-- Return Button -->
            <button 
                type="button" 
                class="btn w-1/2"
                onclick="window.history.back()">
                Cancel
            </button>
            
            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary w-1/2">
                Post Internship
            </button>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private Internship Internship { get; set; } = new();
    
    [Authorize(Roles = "Company")]
    private async Task AddInternship()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        bool hasProfile = await context.CompanyProfiles.AnyAsync(x => x.UserId == UserManager.GetUserId(HttpContextAccessor.HttpContext.User));

        if (!hasProfile)
        {
            NavigationManager.NavigateTo("Account/Manage/Profile");
        }
        
        Internship.PostedAt = DateTime.Now;
        Internship.UserId =  UserManager.GetUserId(HttpContextAccessor.HttpContext.User);

        await Repository.AddAsync(Internship);
        NavigationManager.NavigateTo($"internships/details?id={Internship.Id}");
    }
}


