@using InternLink.Data
@using InternLink.Interfaces
@using Microsoft.AspNetCore.Identity
@using Models

@inject NavigationManager NavigationManager
@inject IInternshipRepository Repository
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<div class="container mx-auto py-10 px-4 lg:px-20">
    @if (internship is not null)
    {
    <!-- Internship Title and Dates -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <NavLink href=@($"/internship?id={internship.Id}") class="text-3xl font-bold">@internship.Title</NavLink>
            <p class="text-gray-600">By @internship.CompanyProfile.CompanyName</p>
        </div>

        <div class="text-right">
            <p class="text-gray-500 text-sm">
                <strong>Posted:</strong> @internship.PostedAt.ToString("dd MMM yyyy")
            </p>
            @if (internship.UpdatedAt > internship.PostedAt)
            {
                <p class="text-gray-500 text-sm">
                    <strong>Last Updated:</strong> @internship.UpdatedAt.ToString("dd MMM yyyy")
                </p>
            }
        </div>
    </div>

    <!-- Internship Location and Duration -->
    <div class="flex items-center space-x-6 mb-8">
        <p class="text-gray-600 flex items-center space-x-2">
            <i class="fas fa-map-marker-alt text-gray-500"></i>
            <span>@internship.Location</span>
        </p>
        <p class="text-gray-600 flex items-center space-x-2">
            <i class="fas fa-clock text-gray-500"></i>
            <span>Minimum @internship.MinDuration months</span>
        </p>
        <p class="text-gray-600 flex items-center space-x-2">
            <i class="fas fa-laptop-house text-gray-500"></i>
            <span>@internship.RemoteLevel</span>
        </p>
    </div>

    <!-- Skills Section -->
    @* <div class="mb-8"> *@
    @*     <h2 class="text-xl font-semibold mb-4">Skills Required</h2> *@
    @*     <div class="flex flex-wrap gap-3"> *@
    @*         <span class="badge badge-outline badge-md">Communication</span> *@
    @*         <span class="badge badge-outline badge-md">Problem Solving</span> *@
    @*         <span class="badge badge-outline badge-md">Teamwork</span> *@
    @*         <span class="badge badge-outline badge-md">Creativity</span> *@
    @*     </div> *@
    @* </div> *@

    <!-- Description Section -->
    <div class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Internship Description</h2>
        <p class="text-gray-700 leading-relaxed">
            @internship.Description
        </p>
    </div>

    <!-- Footer Actions -->
    <div class="flex justify-between items-center">
        <AuthorizeView Roles="Company">
            <Authorized>
                <NavLink
                    href="internships"
                    class="btn">
                    Go to list
                </NavLink>
            </Authorized>
            <NotAuthorized>
                <NavLink
                    onclick="window.history.back()"
                    class="btn">
                    Return
                </NavLink>
            </NotAuthorized>
        </AuthorizeView>
        
        @if (internship.UserId == UserManager.GetUserId(HttpContextAccessor.HttpContext.User))
        {
            <div class="space-x-3">
                <button class="btn btn-error" @onclick="ShowDeleteConfirmationModal">
                    <i class="fas fa-trash"></i>
                    Delete
                </button>
                <NavLink href="@($"internships/edit?id={internship.Id}")" class="btn btn btn-neutral">
                    <i class="fas fa-edit"></i>
                    Edit
                </NavLink>
            </div>
        }
    </div>

    }
    else
    {
    <p>
        <em>Loading...</em>
    </p>
    }
</div>

<DeleteConfirmationModal OnConfirmation="ConfirmDelete" @ref="DeleteConfirmation" />

@code {
    private Internship? internship;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    public DeleteConfirmationModal DeleteConfirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        internship = await Repository.GetByIdAsync(Id);

        if (internship is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    
    private void ShowDeleteConfirmationModal()
    {
        DeleteConfirmation.Show();
    }

    private async Task ConfirmDelete(bool confirmed)
    {
        if (!confirmed) return;
        
        var _internship = await Repository.GetByIdAsync(Id);
        
        if (_internship == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        
        if (_internship.UserId != UserManager.GetUserId(HttpContextAccessor.HttpContext.User))
        {
            NavigationManager.NavigateTo("unauthorized");
        }

        await Repository.DeleteAsync(_internship);
        
        NavigationManager.NavigateTo("internships");

    }

}