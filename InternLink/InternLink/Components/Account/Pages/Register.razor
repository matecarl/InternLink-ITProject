@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using InternLink.Data
@using Microsoft.AspNetCore.Components.Sections

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext AppDbContext
 

<PageTitle>Register</PageTitle>

<SectionContent SectionName="Title">Create an Account</SectionContent>

<StatusMessage Message="@Message"/>
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator/>
    
    <ValidationSummary class="text-danger" role="alert"/>
    
    <!-- Email Field -->
    <div class="mb-4">
        <label for="Input.Email" class="block text-lg font-medium text-gray-700">Email</label>
        <InputText @bind-Value="Input.Email" type="email" id="Input.Email" required autocomplete="username" aria-required="true" 
                   class="input input-bordered w-full mt-2 text-lg p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter your email"/>
        <ValidationMessage For="() => Input.Email" class="text-danger"/>
    </div>

    <!-- Password Field -->
    <div class="mb-4">
        <label for="Input.Password" class="block text-lg font-medium text-gray-700">Password</label>
        <InputText @bind-Value="Input.Password" type="password" id="Input.Password" required autocomplete="new-password" aria-required="true" 
                   class="input input-bordered w-full mt-2 text-lg p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter your password"/>
        <ValidationMessage For="() => Input.Password" class="text-danger"/>
    </div>

    <!-- Password Confirmation Field -->
    <div class="mb-4">
        <label for="Input.ConfirmPassword" class="block text-lg font-medium text-gray-700">Confirm Password</label>
        <InputText @bind-Value="Input.ConfirmPassword" type="password" id="Input.ConfirmPassword" required autocomplete="new-password" aria-required="true" 
               class="input input-bordered w-full mt-2 text-lg p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Confirm your password"/>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
    </div>

    <!-- Account Type Dropdown -->
    <div class="mb-4">
        <label for="Input.Role" class="block text-lg font-medium text-gray-700">Account Type</label>
        <InputSelect @bind-Value="Input.Role" id="Input.Role" required aria-required="true"
                class="select select-bordered w-full mt-2 text-lg p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="student">Student</option>
            <option value="company">Company</option>
        </InputSelect>
        <ValidationMessage For="() => Input.Role" class="text-danger"/>
    </div>

    <!-- Submit Button -->
    <div class="mb-4">
        <button type="submit" class="btn btn-primary w-full py-3 text-lg font-semibold">Register</button>
    </div>

    <!-- Login Link -->
    <div class="text-center">
        <p class="text-sm text-gray-600">Already have an account? <NavLink href="/Account/Login" class="text-blue-600 hover:underline">Login</NavLink></p>
    </div>
</EditForm>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        await using (var transaction = AppDbContext.Database.BeginTransaction())
        {
            var result = await UserManager.CreateAsync(user, Input.Password);
            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                return;
            }
            
            var roleExists = await RoleManager.RoleExistsAsync(Input.Role);
            if (!roleExists)
            {
                identityErrors = new[] { new IdentityError { Description = "Invalid role" } };
                return;
            }
            
            var addUserRoleResult = await UserManager.AddToRoleAsync(user, Input.Role);
            if (!addUserRoleResult.Succeeded)
            {
                identityErrors = addUserRoleResult.Errors;
                return;
            }
            
            await transaction.CommitAsync();
            
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Role { get; set; } = "";
    }

}