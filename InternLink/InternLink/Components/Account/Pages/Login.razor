@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using InternLink.Data
@using Microsoft.AspNetCore.Components.Sections

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<SectionContent SectionName="Title">Log in</SectionContent>

<StatusMessage Message="@errorMessage"/>
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>
    
    <!-- Email Field -->
    <div class="mb-4">
        <label for="Input.Email" class="block text-lg font-medium text-gray-700">Email</label>
        <InputText @bind-Value="Input.Email" type="email" id="Input.Email" required autocomplete="username" aria-required="true" placeholder="Enter your email"
                   class="input input-bordered w-full mt-2 text-lg p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
        <ValidationMessage For="() => Input.Email" class="text-danger"/>
    </div>

    <!-- Password Field -->
    <div class="mb-4">
        <label for="Input.Password" class="block text-lg font-medium text-gray-700">Password</label>
        <InputText @bind-Value="Input.Password" type="password" id="Input.Password" required autocomplete="new-password" aria-required="true" placeholder="Enter your password"
                   class="input input-bordered w-full mt-2 text-lg p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
        <ValidationMessage For="() => Input.Password" class="text-danger"/>
    </div>

    <div class="mb-3 flex items-center ">
        <InputCheckbox @bind-Value="Input.RememberMe" id="Input.RememberMe" class="checkbox darker-border-checkbox form-check-input"/>
        <label for="Input.RememberMe" class="ms-2 form-label">Remember me</label>
    </div>

    <!-- Submit Button -->
    <div class="mb-4">
        <button type="submit" class="btn btn-primary w-full py-3 text-lg font-semibold">Log in</button>
    </div>

    <div>
        <p>
            <a href="Account/ForgotPassword">Forgot your password?</a>
        </p>
        <p>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
        </p>
        <p>
            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
        </p>
    </div>

</EditForm>
   



@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}